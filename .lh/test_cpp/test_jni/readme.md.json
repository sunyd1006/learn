{
    "sourceFile": "test_cpp/test_jni/readme.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717666007867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717666007867,
            "name": "Commit-0",
            "content": "创建Java和C++之间的互相调用涉及到JNI（Java Native Interface）的使用。这里将展示一个简单的例子，其中Java调用一个C++的函数，然后C++再回调一个Java的方法。\n\n### 步骤1: 创建Java类\n\n首先，我们创建一个Java类，它声明了一个native方法和一个回调方法。\n\n```\n// Example.java\npublic class Example {\n\n    static {\n        System.loadLibrary(\"example\"); // 加载本地库\n    }\n\n    public static void main(String[] args) {\n        new Example().nativeMethod(); // 调用本地方法\n    }\n\n    private native void nativeMethod(); // 声明本地方法\n\n    public void callback() {\n        System.out.println(\"This is a message from Java callback!\"); // 被C++调用的方法\n    }\n}\n\n```\n\n### 步骤2: 通过javac编译Java代码\n\n在命令行运行以下命令来编译Java代码，并生成头文件（确保你已经将JDK的 `bin`目录添加到了PATH环境变量）：\n\n```\njavac Example.java\njavah -jni Example\n\n```\n\n这将生成一个头文件 `Example.h`。\n\n### 步骤3: 实现C++代码\n\n然后，我们创建一个C++源文件来实现这些方法。\n\n```\n// example.cpp\n#include <jni.h>\n#include <iostream>\n#include \"Example.h\"\n\nusing namespace std;\n\nJNIEXPORT void JNICALL Java_Example_nativeMethod(JNIEnv *env, jobject obj) {\n    cout << \"This is a message from C++!\" << endl;\n\n    // 获取对象的类\n    jclass cls = env->GetObjectClass(obj);\n\n    // 查找回调方法的ID\n    jmethodID mid = env->GetMethodID(cls, \"callback\", \"()V\");\n    if(mid == nullptr) return; // 方法未找到\n\n    // 调用Java回调方法\n    env->CallVoidMethod(obj, mid);\n}\n\n```\n\n### 步骤4: 编译C++代码并生成共享库\n\n编译C++代码并生成JNI需要的共享库。这个步骤和你所使用的系统相关。\n\n在Macos上，使用g++可以这样做：\n\n```\ng++ -shared -fPIC -I\"${JAVA_HOME}/include\" -I\"${JAVA_HOME}/include/linux\" example.cpp -o libexample.dylib\n```\n\n在Linux上，使用g++可以这样做：\n\n```\ng++ -shared -fPIC -I\"${JAVA_HOME}/include\" -I\"${JAVA_HOME}/include/linux\" example.cpp -o libexample.so\n```\n\n### 步骤5: 运行Java程序\n\n将生成的共享库（`libexample.so`或 `example.dll`）放在Java可识别的路径下，例如在当前目录或者通过 `-Djava.library.path`指定的目录中。在命令行执行Java程序：\n\n```\njava -Djava.library.path =. Example\n```\n\n如果一切顺利，你会看到C++函数打印的消息，然后是Java回调方法打印的消息。\n\n请注意，对于生产用途的程序，你会需要更细致地处理JNI中的错误和异常。 JNI是一个强大但复杂的接口，使用不当可能导致程序稳定性问题。以上只是一个简单的示例，用于基础了解如何在Java和C++之间进行互相调用。\n"
        }
    ]
}